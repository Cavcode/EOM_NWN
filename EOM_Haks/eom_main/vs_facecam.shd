//=============================================================================
//
// vslitc.shd
//
//=============================================================================

#define SHADER_TYPE 1

#define FOG 1
#define KEYHOLING 1

#define NORMAL_MAP 0
#define ENVIRONMENT_MAP 0
#define LIGHTING 1

#define POSITION_VIEW 1

#include "inc_standard"

void TransformMainCoordinatesFaceCamera()
{
	vec4 vLocalPosition = vec4(0.0, 0.0, 0.0, 0.0);
	
	//remove the rotation aspect from view matrix
	mat4 m_mvFaceCamera = mat4(m_mv);	
	vec4 vT = m_mv[3];
	float xx2 = m_mv[0][0]*m_mv[0][0];
	float yx2 = m_mv[0][1]*m_mv[0][1];
	float zx2 = m_mv[0][2]*m_mv[0][2];
	float fD = sqrt(xx2 + yx2 + zx2);
	m_mvFaceCamera[0] = vec4(fD, 0.0, 0.0, 0.0);
	m_mvFaceCamera[1] = vec4(0.0, 0.0, -fD, 0.0);
	m_mvFaceCamera[2] = vec4(0.0, fD, 0.0, 0.0);
	m_mvFaceCamera[3] = vec4(vT.x, vT.y, vT.z, vT.w);

	#if NORMAL_MAP == 1
		vVertexTangent = vec3(0.0, 0.0, 0.0);
	#endif
	#if VERTEX_NORMAL == 1
		vVertexNormal = vec3(0.0, 0.0, 0.0);
	#endif
	if(skinmesh == 1)
	{
		int index = 0;
		
		if(vWeight.x > 0.0)
		{
			index = int(vIndex.x);
			vLocalPosition = SkinmeshTransformPosition(vPos, index) * vWeight.x;
			#if NORMAL_MAP == 1
				vVertexTangent = SkinmeshTransformOrientation(vTangent, index) * vWeight.x;
			#endif
			#if VERTEX_NORMAL == 1
				vVertexNormal = SkinmeshTransformOrientation(vNormal, index) * vWeight.x;
			#endif
		}
		if(vWeight.y > 0.0)
		{
			index = int(vIndex.y);
			vLocalPosition += SkinmeshTransformPosition(vPos, index) * vWeight.y;
			#if NORMAL_MAP == 1
				vVertexTangent = SkinmeshTransformOrientation(vTangent, index) * vWeight.y + vVertexTangent;
			#endif
			#if VERTEX_NORMAL == 1
				vVertexNormal = SkinmeshTransformOrientation(vNormal, index) * vWeight.y + vVertexNormal;
			#endif
		}
		if(vWeight.z > 0.0)
		{
			index = int(vIndex.z);
			vLocalPosition += SkinmeshTransformPosition(vPos, index) * vWeight.z;
			#if NORMAL_MAP == 1
				vVertexTangent = SkinmeshTransformOrientation(vTangent, index) * vWeight.z + vVertexTangent;
			#endif
			#if VERTEX_NORMAL == 1
				vVertexNormal = SkinmeshTransformOrientation(vNormal, index) * vWeight.z + vVertexNormal;
			#endif
		}
		if(vWeight.w > 0.0)
		{
			index = int(vIndex.w);
			vLocalPosition += SkinmeshTransformPosition(vPos, index) * vWeight.w;
			#if NORMAL_MAP == 1
				vVertexTangent = SkinmeshTransformOrientation(vTangent, index) * vWeight.w + vVertexTangent;
			#endif
			#if VERTEX_NORMAL == 1
				vVertexNormal = SkinmeshTransformOrientation(vNormal, index) * vWeight.w + vVertexNormal;
			#endif
		}
	}
	else
	{
		vLocalPosition = vPos;
		#if VERTEX_NORMAL == 1
			vVertexNormal = vNormal;
		#endif
		#if NORMAL_MAP == 1
			vVertexTangent = vTangent;
		#endif
	}
	vec4 vPosProj;

	#if POSITION_VIEW == 1
		vPosView = (m_mvFaceCamera * vLocalPosition).xyz;

		vPosProj = m_proj * vec4(vPosView.x, vPosView.y, vPosView.z, 1.0);

		#if NORMAL_MAP == 1
			vVertexTangent = mat3(m_mvFaceCamera) * vVertexTangent;
		#endif

		#if VERTEX_NORMAL == 1
			vVertexNormal = mat3(m_mvFaceCamera) * vVertexNormal;
		#endif
	
	#else 
	
		vPosProj = m_mvp * vLocalPosition;
	#endif

	gl_Position = vPosProj;
	
	#if POSITION_WORLD == 1
		vPosWorld = (m_vp_inv * vPosProj).xyz;
	#endif 


	#if NO_TEXTURE != 1

		#if NORMAL_MAP == 1
			fTextureHandedness = fHandedness;
		#endif
		

		#if NO_TEXTURE_COORDS != 1
			vVertexTexCoords = mat2(m_texture) * vTcIn.xy;
		#else
			vVertexTexCoords = vec2(0.5, 0.5);
		#endif

	#endif
}

void ApplyFaceCameraShader()
{
	TransformMainCoordinatesFaceCamera();

	#if KEYHOLING == 1
	SetupKeyholeFactors();
	#endif 
	// Used for both specular light and environment map.
	#if ((ENVIRONMENT_MAP == 1 || SPECULAR_LIGHT == 1) && FRAGMENT_NORMAL != 1)
		SetupViewToSurfaceNormal();
	#endif

	#if LIGHTING == 1

		SetupLights();

		// Sets initial vertex color. For vertex lighting, this is done as part of the ComputeLighting call instead.
		#if FRAGMENT_LIGHTING == 1
			// Nothing for now.
		#elif FRAGMENT_NORMAL == 1

			if(staticLighting == 1)
			{
				VertexStaticLighting = ApplyColorSpace(vColor.rgb);
			}
			else
			{
				VertexStaticLighting = vec3(0.0, 0.0, 0.0);
			}	
			
		#else
			VertexColor = vec4(1.0, 1.0, 1.0, 1.0);
			ComputeLighting(VertexColor, vVertexNormal);
			
		#endif

	#elif VERTEX_COLOR == 1
	
		VertexColor *= ApplyColorSpace(vColor);

	#endif

	#if (ENVIRONMENT_MAP == 1 || SPECULAR_LIGHT == 1) && FRAGMENT_NORMAL != 1
		if(envMapCube == 1)
		{
			vVertexTexCoordsEnvironmentCube = CalculateEnvironmentTexCoordsCube(vVertexNormal);
			vVertexTexCoordsEnvironment = vec2(0.0, 0.0);
		}
		else
		{
			vVertexTexCoordsEnvironment = CalculateEnvironmentTexCoords(vVertexNormal);
			vVertexTexCoordsEnvironmentCube = vec3(0.0, 0.0, 0.0);
		}
	#endif

	#if FOG == 1
		SetupFog();
	#endif
}

void main ()
{
    ApplyFaceCameraShader();
}
