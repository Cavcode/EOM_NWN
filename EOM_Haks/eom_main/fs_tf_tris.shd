//*************************************
//           REQUIRED HEADER
//*************************************


#define SHADER_TYPE 2

#define LIGHTING 0
#define FOG 1
#define KEYHOLING 0

#define NORMAL_MAP 0
#define SPECULAR_MAP 0
#define ROUGHNESS_MAP 0
#define HEIGHT_MAP 0
#define SELF_ILLUMINATION_MAP 0
#define ENVIRONMENT_MAP 0


#define S(a, b, t) smoothstep(a, b, t)
//#define NUM_LAYERS 4.0

#include "inc_standard"

uniform int worldtimerTimeOfDay;

uniform float TRIANGLES_SCALE;

uniform float ANIMATION_SPEED;

uniform float NUM_LAYERS;




float N21(vec2 p) {
	vec3 a = fract(vec3(p.xyx) * vec3(213.897, 653.453, 253.098));
    a += dot(a, a.yzx + 79.76);
    return fract((a.x + a.y) * a.z);
}


vec2 GetPos(vec2 id, vec2 offs, float t) {
    float n = N21(id+offs);
    float n1 = fract(n*10.0);
    float n2 = fract(n*100.0);
    float a = t+n;
    return offs + vec2(sin(a*n1), cos(a*n2))*0.4;
}

float GetT(vec2 ro, vec2 rd, vec2 p) {
	return dot(p-ro, rd); 
}

float LineDist(vec3 a, vec3 b, vec3 p) {
	return length(cross(b-a, p-a))/length(p-a);
}


float df_line( in vec2 a, in vec2 b, in vec2 p)
{
    vec2 pa = p - a, ba = b - a;
	float h = clamp(dot(pa,ba) / dot(ba,ba), 0.0, 1.0);	
	return length(pa - ba * h);
}

float line(vec2 a, vec2 b, vec2 uv) {
    float r1 = 0.04;
    float r2 = 0.01;
    
    float d = df_line(a, b, uv);
    float d2 = length(a-b);
    float fade = S(1.5, 0.5, d2);
    
    fade += S(0.05, 0.02, abs(d2-.075));
    return S(r1, r2, d)*fade;
}


float NetLayer(vec2 st, float n, float t) {
    vec2 id = floor(st)+n;

    st = fract(st)-.5;
   
    vec2 p[9];
    int i=0;
    for(float y=-1.0; y<=1.0; y++) {
    	for(float x=-1.0; x<=1.0; x++) {
            p[i++] = GetPos(id, vec2(x,y), t);
    	}
    }
    
    float m = 0.0;
    float sparkle = 0.0;
    
    for(int i=0; i<9; i++) {
        m += line(p[4], p[i], st);

        float d = length(st-p[i]);

        float s = (0.005/(d*d));
        s *= S(1.0, 0.7, d);
        float pulse = sin((fract(p[i].x)+fract(p[i].y)+t)*5.0)*0.4+0.6;
        pulse = pow(pulse, 20.0);

        s *= pulse;
        sparkle += s;
    }
    
    m += line(p[1], p[3], st);
	m += line(p[1], p[5], st);
    m += line(p[7], p[5], st);
    m += line(p[7], p[3], st);
    
    float sPhase = (sin(t+n)+sin(t*0.1))*0.25+0.5;
    sPhase += pow(sin(t*0.1)*0.5+0.5, 50.0)*5.0;
    m += sparkle*sPhase;//(*.5+.5);
    
    return m;
}






void main(){

	//get texture info
	FragmentColor = vec4(vec3(0.0), 1.0);

	//set up base fragment
    SetupStandardShaderInputs();	
		
	//get the uv map from the mesh
	vec2 uv = vTexCoords.xy - vec2(TRIANGLES_SCALE);
	//vec2 uv = vTexCoords.xy * 0.5;
	
	//float t = iTime*0.1;
	
	//float t = worldtimerTimeOfDay*0.01;
	float t = ANIMATION_SPEED * PI * worldtimerTimeOfDay/100.0;
	
    float s = sin(t);
    float c = cos(t);	
	
    mat2 rot = mat2(c, -s, s, c);
    vec2 st = uv*rot;  
	//M *= rot*2.0;	
	
    float m = 0.0;
    for(float i=0.0; i<1.0; i+=1.0/NUM_LAYERS) 
	{
        float z = fract(t+i);
        float size = mix(15.0, 1.0, z);
        float fade = smoothstep(0.0, 0.6, z)*smoothstep(1.0, 0.8, z);
        
      //  m += fade * NetLayer(st*size-M*z, i, iTime);
	  m += fade * NetLayer(st*size*z, i, worldtimerTimeOfDay);
    }	
	
	//float fft  = texelFetch( iChannel0, ivec2(0.7,0), 0 ).x;
	
//	float fft  = texelFetch(texUnit0, ivec2(0.7,0), 0 ).x;

//	float fft = uv.x
	
  //  float glow = -uv.y*fft*2.0;	
	
 //   vec3 baseCol = vec3(s, cos(t*0.4), -sin(t*0.24))*0.4+0.6;
 //   vec3 col = baseCol*m;
 //   col += baseCol*glow;	
 
    vec3 baseCol = sin(t * 5.0 * vec3(0.345, 0.456, 0.567)) * 0.4 + 0.6;
    vec3 col = m * baseCol;
    
    col -= m * baseCol; 
 
		
 //   #ifdef SIMPLE
    uv *= 10.0;
    col = vec3(1)*NetLayer(uv, 0.0, t);
    uv = fract(uv);
  //  if(uv.x>.98 || uv.y>.98) col += 1.;
  //  #else
 //   col *= 1.0-dot(uv,uv);
 //   t = mod(worldtimerTimeOfDay, 230.0);
 //   col *= smoothstep(0.0, 20.0, t)*smoothstep(224.0, 200.0, t);
 //   #endif
    
   // fragColor = vec4(col,1);	
	gl_FragColor = vec4(col,1);
	
	
	//uv.y = abs(uv.y);
	//uv *= 1.0/PORTAL_WARP_SCALE;
			
	//get the timer value
	//float t = PORTAL_SPEED * PI * worldtimerTimeOfDay/1000.0;
	    
	//setup noise
   // float q = 0.6-fbm(5.0*vTexCoords + t/10.0);

	//build warp
    //vec3 c1; 
   // float s;
    
	//get angle and ray length from uv coordinates
	//float a = PORTAL_WARP_WIGGLE * atan(uv.x, uv.y);
	//float l = length(uv);
	
	//waves
	//float d = l + 0.1;
	//d += 0.3 * pow(d, 2.5) * sin(a * 18.0);
	//d = pow(d, 0.005);
	//d *= 5999.0;


	//finalize
	//gl_FragColor = FragmentColor;	
		
	//gl_FragDepth = ((m_proj[2][2] * vPosView.z + m_proj[3][2]) / (vPosView.z * m_proj[2][3] + m_proj[3][3])) * 0.5 + 0.5;
	
}