//*************************************
//           REQUIRED HEADER
//*************************************
#define SHADER_TYPE 2

#define LIGHTING 0
#define FOG 1
#define KEYHOLING 0

#define NORMAL_MAP 0
#define SPECULAR_MAP 0
#define ROUGHNESS_MAP 0
#define HEIGHT_MAP 0
#define SELF_ILLUMINATION_MAP 0
#define ENVIRONMENT_MAP 0

#include "inc_standard"
uniform int worldtimerTimeOfDay;


//*************************************
//           WARP CONTROL
// 	   These are set by the MTR 
//   and controllable by NwScript
//*************************************
//control warp speed and direction (use negative value to reverse)
uniform float PORTAL_SPEED;

//control warp scale (default: 1.0)
uniform float PORTAL_WARP_SCALE;

//control number of waves (default: 9.0)
uniform float PORTAL_WAVE_COUNT;

//set the RGB color of the warp field (default: [0,0,1] )
uniform vec4 PORTAL_WARP_COLOR;

//manipulate the color of the waves (default: [1,1,1] )
uniform vec4 PORTAL_WAVE_COLOR;

//modify the speed at which the waves wiggle (default: 1.0)
uniform float PORTAL_WAVE_WIGGLE_SPEED;

//modify the amount of wiggle along each wave (default: 1.0)
uniform float PORTAL_WAVE_WIGGLE;

//modify the thickness of the wave (default: 1.0)
uniform float PORTAL_WARP_THICKNESS; 

//modify the warp field wiggle frequency (default: 1.0. Zero produces circles)
uniform float PORTAL_WARP_WIGGLE;

//modify the rate of fading to black away from the center (default: 1.0)
//only works on the warp field, not the waves
uniform float PORTAL_EDGE_FADE;

//add some reflection and water movement
//grabs the background and mixes it using a ripple effect with base offset
uniform int DRAW_REFLECTIONS;

//subtract dark output from alpha
uniform int FADE_BLENDING;

//*************************************
//           MAIN DRAWING
//*************************************
const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );

vec2 hash( vec2 p ) {
    p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
    return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
    vec2 i = floor(p + (p.x+p.y)*K1);   
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));  
}

float fbm(vec2 n) {
    float total = 0.0, amplitude = 0.1;
    for (int i = 0; i < 7; i++) {
        total += noise(n) * amplitude;
        n = m * n;
        amplitude *= 0.4;
    }
    return total;
}

vec3 ScreenBlend(vec3 v1, vec3 v2){
	return vec3(1.0)-(vec3(1.0)-v1)*(vec3(1.0)-v2);
}

void main(){

	//get texture info
	FragmentColor = vec4(vec3(0.0), 1.0);

	//set up base fragment
    SetupStandardShaderInputs();	
		
	//get the uv map from the mesh
	vec2 uv = vTexCoords.xy - vec2(0.5);
	uv.y = abs(uv.y);
	uv *= 1.0/PORTAL_WARP_SCALE;
			
	//get the timer value
	float t = PORTAL_SPEED * PI * worldtimerTimeOfDay/1000.0;
	    
	//setup noise
    float q = 0.6-fbm(5.0*vTexCoords + t/10.0);

	//build warp
    vec3 c1; 
    float s;
    
	//get angle and ray length from uv coordinates
	float a = PORTAL_WARP_WIGGLE * atan(uv.x, uv.y);
	float l = length(uv);
	
	//waves
	float d = l + 0.1;
	d += 0.3 * pow(d, 2.5) * sin(a * 18.0);
	d = pow(d, 0.005);
	d *= 5999.0;

	//rings
	d = 0.5 + 0.5 * sin(d - 2.0 * 8.0 * t);

	//thicker at center
	float b = pow(d, 1.0/PORTAL_WARP_THICKNESS);

	//fade at sides
	b *= 1.0 - l * PORTAL_EDGE_FADE;
	
	//thin stripes at sides
	s = 1.0 + 1.0 * l * sin(a * 300.0);
	b *= s;
	
	//set warp color
	c1 = b * PORTAL_WARP_COLOR.xyz;
    	
	//build waves
	vec3 c2;
	
	float y = uv.y * PORTAL_WARP_SCALE;
	float x = uv.x * PORTAL_WAVE_COUNT * PORTAL_WARP_SCALE / 5.0;
	
	//skew
	x -= sin(y * 6.0)/9.0;

	//perspective
	x /= pow(y + sign(y), 6.0);

	//waves
	a = pow(abs(y) + 0.03, 0.1) * 32.0;
	x += 0.03 * sin(PORTAL_WAVE_WIGGLE * a - PORTAL_WAVE_WIGGLE_SPEED * t);

	//stripes
	x = sin(x * 30.0);

	//color - cycle pink and cyan
	b = pow(abs(x), 20.0);    
	float p = sin(t / 2.0) * 0.5 + 0.5;
	c2 = b * vec3(p, (1.0 - p), 0.9) * PORTAL_WAVE_COLOR.xyz;	
	
	//apply inverse stripes
	c2 /= s;
	
	//set base fragment color
	FragmentColor.rgb = c1 + c2 * 0.5;
	
	
	//apply reflection blend mode
	if (DRAW_REFLECTIONS == 1) {
		vec2 vScreenCoords = vec2(float(gl_FragCoord.x) * invScreenWidth, float(gl_FragCoord.y) * invScreenHeight);		
		float fLum = ColorToLuma(FragmentColor.rgb);
		vec4 vBehindColor = texture2D(texFBColor, vScreenCoords.xy + vec2(0.3*((0.2+fLum)*q), -0.3*((0.2+fLum)*q)) );
		vBehindColor += texture2D(texFBColor, vScreenCoords.xy - vec2(0.3*((0.2-fLum)*q)) );
		vBehindColor *= 0.5;
		FragmentColor.rgb = ScreenBlend((1.0+q)*FragmentColor.rgb, q*vBehindColor.rgb);
	}
	

	//fade alpha when fading edge
	if (FADE_BLENDING == 1) {
		FragmentColor.a *= 2.0*pow(ColorToLuma(FragmentColor.rgb), 0.5);
		AlphaDiscard(FragmentColor.a);
	}

	//finalize
	gl_FragColor = FragmentColor;	
	
	//gl_FragDepth = ((m_proj[2][2] * vPosView.z + m_proj[3][2]) / (vPosView.z * m_proj[2][3] + m_proj[3][3])) * 0.5 + 0.5;
	
}